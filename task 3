 Restaurant menu
 
 A restaurant menu UI/UX project is the process of designing a menu that is
 both visually appealing and easy to use. The goal of a good restaurant menu
 is to make it easy for customers to find the dishes they want, and to
 encourage them to order more.
 A good restaurant menu should be:
 Visually appealing: The menu should be visually appealing and easy to read. The use of
 colors, fonts, and images should be carefully considered to create a visually appealing
 menu.
 Easy to use: The menu should be easy to use and navigate. The customer should be able to
 easily find the necessary information and make their selections.
 Categorized: The menu should be categorized, so that customers can easily find the dishes
 they are looking for. The categories should be clear and concise, and they should be
 consistent throughout the menu.


index.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Restaurant Menu</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <div class="menu-container">
    <header>
      <h1>Menu</h1>
      <input type="text" placeholder="Search">
      <button class="cart-button">ðŸ›’</button>
    </header>

    <nav class="categories">
      <button class="category active" data-category="all">All</button>
      <button class="category" data-category="breakfast">Breakfast</button>
      <button class="category" data-category="lunch">Lunch</button>
      <button class="category" data-category="dessert">Dessert</button>
      <button class="category" data-category="drinks">Drinks</button>
    </nav>

    <section class="menu-items">
      <!-- Menu Items -->
      <div class="item" data-category="breakfast">
        <img src="https://tse2.mm.bing.net/th?id=OIP.zgdwdrR_HbL1k1fLaSYvqQHaFW&pid=Api&P=0&h=180" alt="Pear & Orange">
        <h3>Pear & Orange</h3>
        <p>20 min | $25.00</p>
        <button class="view-button" data-description="A refreshing dish of pears and oranges with syrup and mint.">View Details</button>
      </div>
      <div class="item" data-category="breakfast">
        <img src="https://tse4.mm.bing.net/th?id=OIP.LvqTckqtRwO82VnM4qJyFQHaEK&pid=Api&P=0&h=180" alt="Egg & Bread">
        <h3>Egg & Bread</h3>
        <p>10 min | $20.00</p>
        <button class="view-button" data-description="A classic breakfast of eggs and toasted bread, served with butter.">View Details</button>
      </div>
      <div class="item" data-category="lunch">
        <img src="https://tse1.mm.bing.net/th?id=OIP.Q6UJIgcIVLI9gqwh6fAxugHaE8&pid=Api&P=0&h=180" alt="Meat & Mushrooms">
        <h3>Meat & Mushrooms</h3>
        <p>30 min | $37.00</p>
        <button class="view-button" data-description="A hearty meal of grilled meat and sautÃ©ed mushrooms.">View Details</button>
      </div>
      <div class="item" data-category="dessert">
        <img src="https://images.unsplash.com/photo-1627308595229-7830a5c91f9f" alt="Sweet Pancake">
        <h3>Sweet Pancake</h3>
        <p>15 min | $15.00</p>
        <button class="view-button" data-description="Fluffy pancakes topped with syrup and fresh berries.">View Details</button>
      </div>
      <div class="item" data-category="drinks">
        <img src="https://tse4.mm.bing.net/th?id=OIP.Q_fVFQyxgraJLFrGLNNvxAHaFD&pid=Api&P=0&h=180" alt="Orange Juice">
        <h3>Orange Juice</h3>
        <p>5 min | $8.00</p>
        <button class="view-button" data-description="Freshly squeezed orange juice served chilled.">View Details</button>
      </div>
    </section>
  </div>

  <!-- Modal for Item Description -->
  <div id="item-modal" class="modal">
    <div class="modal-content">
      <span class="close-button">&times;</span>
      <h2 id="item-title"></h2>
      <p id="item-description"></p>
    </div>
  </div>

  <script src="script.js"></script>
</body>
</html>


style.css

body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f9f9f9;
  }
  
  .menu-container {
    max-width: 420px;
    margin: auto;
    background: #fff;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  
  header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px;
    background: #5A9;
    color: #fff;
  }
  
  header input {
    flex: 1;
    margin: 0 10px;
    padding: 8px;
    border: none;
    border-radius: 5px;
  }
  
  .cart-button {
    background: #fff;
    color: #5A9;
    border: none;
    padding: 8px;
    border-radius: 5px;
  }
  
  .categories {
    display: flex;
    overflow-x: auto;
    background: #f3f3f3;
    padding: 10px;
  }
  
  .category {
    flex: 1;
    padding: 10px;
    margin: 0 5px;
    background: #ddd;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }
  
  .category.active {
    background: #5A9;
    color: #fff;
  }
  
  .menu-items {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 10px;
    padding: 10px;
  }
  
  .item {
    background: #fff;
    border: 1px solid #ddd;
    border-radius: 5px;
    text-align: center;
    padding: 10px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .item img {
    max-width: 100%;
    border-radius: 5px;
  }
  
  .item h3 {
    font-size: 16px;
    margin: 10px 0;
  }
  
  .item p {
    font-size: 14px;
    color: #777;
  }
  
  .view-button {
    padding: 8px 10px;
    background: #5A9;
    color: #fff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }
  
  /* Modal styling */
  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    justify-content: center;
    align-items: center;
  }
  
  .modal-content {
    background: #fff;
    padding: 20px;
    border-radius: 10px;
    text-align: center;
  }
  
  .close-button {
    position: absolute;
    top: 10px;
    right: 20px;
    font-size: 20px;
    cursor: pointer;
  }


script.js

document.addEventListener("DOMContentLoaded", () => {
    const categories = document.querySelectorAll(".category");
    const menuItems = document.querySelectorAll(".item");
    const searchInput = document.querySelector("input[type='text']");
    const menuSection = document.querySelector(".menu-items");
  
    // Filter menu items by category
    categories.forEach((category) => {
      category.addEventListener("click", () => {
        const categoryName = category.getAttribute("data-category");
  
        // Highlight selected category
        categories.forEach((cat) => cat.classList.remove("active"));
        category.classList.add("active");
  
        // Show items matching the selected category
        menuItems.forEach((item) => {
          if (categoryName === "all" || item.getAttribute("data-category") === categoryName) {
            item.style.display = "block";
          } else {
            item.style.display = "none";
          }
        });
      });
    });
  
    // Search functionality
    searchInput.addEventListener("input", () => {
      const searchKey = searchInput.value.toLowerCase().trim();
      let found = false;
  
      menuItems.forEach((item) => {
        const itemName = item.querySelector("h3").textContent.toLowerCase();
  
        if (itemName.includes(searchKey)) {
          item.style.display = "block";
          found = true;
        } else {
          item.style.display = "none";
        }
      });
  
      // If no items match, display "Item not found"
      if (!found && searchKey) {
        menuSection.innerHTML = `<div class="not-found">Item not found in the menu.</div>`;
      } else if (!searchKey) {
        // Reset menu if search input is empty
        menuSection.innerHTML = "";
        menuItems.forEach((item) => menuSection.appendChild(item));
      }
    });
  
    // View item details in modal
    const viewButtons = document.querySelectorAll(".view-button");
    const modal = document.getElementById("item-modal");
    const modalTitle = document.getElementById("item-title");
    const modalDescription = document.getElementById("item-description");
    const closeModal = document.querySelector(".close-button");
  
    viewButtons.forEach((button) => {
      button.addEventListener("click", () => {
        modalTitle.textContent = button.parentElement.querySelector("h3").textContent;
        modalDescription.textContent = button.getAttribute("data-description");
        modal.style.display = "block";
      });
    });
  
    closeModal.addEventListener("click", () => {
      modal.style.display = "none";
    });
  
    window.addEventListener("click", (e) => {
      if (e.target === modal) {
        modal.style.display = "none";
      }
    });
  });
  
